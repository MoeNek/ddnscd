#! /usr/bin/env perl
use JSON;
use Data::Dumper;

## Pre Processing
$file_config=$ARGV[0];
chomp($progname=readpipe("basename $0"));
if(!$file_config)
{
	die ("Dynamic DNS Client Daemon v1.2(beta3)\nUsage: $progname config_file\n\n\tconfig_file\tConfiguration in JSON form.\n\nhttps://github.com/bilintsui/ddnscd\n(C) 2020 Bilin Tsui. Licensed with GNU GPL v3.\n");
}
if(!(-e $file_config))
{
	die ("Error: Configuration file \"$file_config\" don't exist.\n");
}

## Function Block 1
sub json_preprocess
{
	chomp(my(@source)=@_);
	my($result)='';
	foreach $recline(@source)
	{
		$recline=~s/^\s+//g;
		$recline=~s/\s+$//g;
		$result=$result.$recline;
	}
	return $result;
}
sub json_curl
{
	my($command)=@_;
	my(@response)=();
	my($trycount)=0;
	do
	{
		@response=readpipe($command);
		$trycount++;
	} while((!@response)&&($trycount<=3));
	my($processed)=json_preprocess(@response);
	my($result)=decode_json($processed);
	return $result;
}
sub json_configload
{
	my($filename)=@_;
	open CONF,"<$filename";
	my(@config_preraw)=();
	chomp(@configs_preraw=<CONF>);
	close CONF;
	my($configs_raw)=json_preprocess(@configs_preraw);
	my($configs)=decode_json($configs_raw);
	return $configs;
}
sub cloudflare_zid_lookup
{
	my($username,$password,$update_rootdomain)=@_;
	my($return)='';
	my($decoded_json)=json_curl('curl -s -X GET "https://api.cloudflare.com/client/v4/zones" -H "Content-Type:application/json" -H "X-Auth-Key:'.$password.'" -H "X-Auth-Email:'.$username.'"');
	my($zones_success)=$decoded_json->{success};
	if(!$zones_success)
	{
		return -1;
	}
	my($zone_count)=($decoded_json->{result_info}->{count})-1;
	my($rec_zone_count)=0;
	for($rec_zone_count=0;$rec_zone_count<=$zone_count;$rec_zone_count++)
	{
		my($rec_zone_name)=$decoded_json->{result}->[$rec_zone_count]->{name};
		if($rec_zone_name eq $update_rootdomain)
		{
			my($rec_zone_id)=$decoded_json->{result}->[$rec_zone_count]->{id};
			$return=$rec_zone_id;
			last;
		}
	}
	return $return;
}
sub cloudflare_record_lookup
{
	my($username,$password,$update_domain,$zone_id)=@_;
	my($return)=();
	my($decoded_json)=json_curl('curl -s -X GET "https://api.cloudflare.com/client/v4/zones/'.$zone_id.'/dns_records?name='.$update_domain.'" -H "Content-Type:application/json" -H "X-Auth-Key:'.$password.'" -H "X-Auth-Email:'.$username.'"');
	my($records_success)=$decoded_json->{success};
	if(!$records_success)
	{
		return -1;
	}
	my($results)=$decoded_json->{result};
	foreach $rec_result(@{$results})
	{
		my($result_single)=();
		$result_single->{id}=$rec_result->{id};
		$result_single->{ip}=$rec_result->{content};
		$result_single->{type}=$rec_result->{type};
		push @{$return}, $result_single;
	}
	return $return;
}
sub cloudflare_dns_update
{
	my($username,$password,$zid,$rid,$type,$update_domain,$new_ip)=@_;
	my($execstr)='curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/'.$zid.'/dns_records/'.$rid.'" -H "Content-Type:application/json" -H "X-Auth-Key:'.$password.'" -H "X-Auth-Email:'.$username.'" --data \'{"type":"'.$type.'","name":"'.$update_domain.'","content":"'.$new_ip.'"}\'';
	my($decoded_json)=json_curl($execstr);
	my($response_success)=$decoded_json->{success};
	if(!$response_success)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

## Config Processing
$decoded_config=json_configload($file_config);
$config_runmode=$decoded_config->{runmode};
$config_log=$decoded_config->{log};
$config_loglevel=$decoded_config->{loglevel};
$config_daemon=$decoded_config->{tick};
$config_iplookup=$decoded_config->{lookup4};
$config_ip6lookup=$decoded_config->{lookup6};
$config_deploys=$decoded_config->{deploys};

## Function Block 2 (Depended with Configuration Loaded)
sub ip_lookup
{
	my($type,$domain)=@_;
	if($type eq 'A')
	{
		my($address)=readpipe('curl -s '.$config_iplookup);
		return $address;
	}
	if($type eq 'AAAA')
	{
		my($address)=readpipe('curl -s '.$config_ip6lookup);
		return $address;
	}
	return -1;
}
sub log_process
{
	my($level,$message)=@_;
	open LOGFD,">>$config_log";
	my($nowtime);
	chomp($nowtime=readpipe("date '+[%F %T %Z]'"));
	my($maxlevel)=$config_loglevel;
#	if(!$maxlevel)
#	{
#		$maxlevel=1;
#	}
#	print "$level,$maxlevel";
#	print '.';
#	if($level<=$maxlevel)
#	{
		print $message;
		print LOGFD "$nowtime $message";
#	}
	close LOGFD;
}

sub cloudflare_apply
{
	my(@arguments)=@_;
	my($root)=shift @arguments;
	my($username)=shift @arguments;
	my($password)=shift @arguments;
	my(@deploy)=@arguments;
	$zid=cloudflare_zid_lookup($username,$password,$root);
	if($zid==-1)
	{
		log_process(0,"CF4_FINDZID(${root}): Not a vaild response, please check your account or it just a temporary failure.\n");
	}
	if($zid eq '')
	{
		log_process(0,"CF4_FINDZID(${root}): Cannot find ${root} zone associated with this accountant.\n");
	}
	foreach $recdeploy(@deploy)
	{
		my($realdomain)='';
		if(($recdeploy ne '@')&&($recdeploy ne ''))
		{
			$realdomain="${recdeploy}.${root}";
		}
		else
		{
			$realdomain="${root}";
		}
		my($records)=cloudflare_record_lookup($username,$password,$realdomain,$zid);
		if($records==-1)
		{
			log_process(0,"CF4_FINDREC(${realdomain}): Not a vaild response, please check your account or it just a temporary failure.\n");
		}
		if(!@{$records})
		{
			log_process(0,"CF4_FINDRID(${realdomain}): Cannot find any existing A/AAAA DNS record.\n");
		}
		foreach $rec_record(@{$records})
		{
			$rid=$rec_record->{id};
			$rtype=$rec_record->{type};
			$rip=$rec_record->{ip};
			$lip=-1;
			$failcount=0;
			while($lip==-1)
			{
				$lip=ip_lookup($rtype,$config_deployname);
				if($failcount>=8)
				{
					last;
				}
				$failcount++;
			}
			if($failcount>=8)
			{
				log_process(0,"CF4_LOOKUP(${realdomain}-${rtype}): Cannot lookup a vaild IP for current client, max tries reached.\n");
				next;
			}
			if($rip ne $lip)
			{
				my($response)=cloudflare_dns_update($username,$password,$zid,$rid,$rtype,$realdomain,$lip);
				if($response==0)
				{
					log_process(1,"CF4_UPDATE(${realdomain}-${rtype}): Updated record from ${rip} to ${lip}.\n");
				}
				else
				{
					log_process(0,"CF4_UPDATE(${realdomain}-${rtype}): Failed to update record.\n");
				}
			}
			else
			{
				log_process(2,"CF4_UPDATE(${realdomain}-${rtype}): IP not changed, ignored.\n");
			}
		}
	}
}

## Main Process
while(1)
{
	foreach $rec_deploys(@{$config_deploys})
	{
		my($config_root)=$rec_deploys->{root};
		my($config_username)=$rec_deploys->{username};
		my($config_password)=$rec_deploys->{password};
		my(@config_deploy)=@{$rec_deploys->{deploy}};
		cloudflare_apply($config_root,$config_username,$config_password,@config_deploy);
	}
	sleep($config_daemon);
}
